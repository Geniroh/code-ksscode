datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    role          UserRole        @default(USER)
    sessions      Session[]
    reviews       Review[]
    points        Points[]
    question      Question[]
    answers       Answers[]
    activityLog   ActivityLog[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String?
    date        DateTime
    startTime   String
    endTime     String
    userId      String     @db.ObjectId
    guests      String[]
    image       String?
    reviews     Review[]
    Resource    Resource[]

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Resource {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    type      String
    url       String
    sessionId String  @db.ObjectId
    session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Review {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    content   String
    rating    Int
    sessionId String  @db.ObjectId
    userId    String  @db.ObjectId
    session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @id @map("_id")
    userId               String  @db.ObjectId
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, credentialID])
}

model Points {
    id      String  @id @default(auto()) @map("_id") @db.ObjectId
    userId  String  @db.ObjectId
    type    String
    value   Int     @default(0)
    eventId String? @db.ObjectId
    reason  String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tags {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    questions Int    @default(0)

    question QuestionTag[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Question {
    id        String        @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    content   String
    views     Int           @default(0)
    upvotes   Int           @default(0)
    downvotes Int           @default(0)
    answers   Int           @default(0)
    author    String        @db.ObjectId
    score     Int?          @default(0)
    questions QuestionTag[]

    user   User      @relation(fields: [author], references: [id], onDelete: Cascade)
    answer Answers[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Answers {
    id         String  @id @default(auto()) @map("_id") @db.ObjectId
    userId     String  @db.ObjectId
    questionId String  @db.ObjectId
    content    String
    upvotes    Int     @default(0)
    downvotes  Int
    answered   Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ActivityLog {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    action    String
    targetId  String?  @db.ObjectId
    metadata  Json?
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QuestionTag {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    questionId String @db.ObjectId
    tagId      String @db.ObjectId

    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    tag      Tags     @relation(fields: [tagId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([questionId, tagId]) // Ensure no duplicate relationships
}
